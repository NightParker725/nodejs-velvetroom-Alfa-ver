{
  "info": {
    "name": "Velvet Room API — CRUD",
    "_postman_id": "velvet-room-collection",
    "description": "CRUD completo, Usa environment para tokens/IDs.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    { "name": "Revisar salud del servicio", "request": { "method": "GET", "url": "{{baseUrl}}/health" } },

    {
      "name": "Autenticación",
      "item": [
        {
          "name": "Iniciar sesión (admin) → guarda {{adminToken}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "pm.test('200', ()=>pm.response.to.have.status(200));",
            "const j=pm.response.json(); pm.environment.set('adminToken', j.token);"
          ]}}],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"email\":\"{{adminEmail}}\",\n  \"password\":\"{{adminPass}}\"\n}" },
            "url": "{{baseUrl}}/api/auth/login"
          }
        },
        {
          "name": "Iniciar sesión (vendedor) → guarda {{sellerToken}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "pm.test('200', ()=>pm.response.to.have.status(200));",
            "const j=pm.response.json(); pm.environment.set('sellerToken', j.token);"
          ]}}],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"email\":\"{{sellerEmail}}\",\n  \"password\":\"{{sellerPass}}\"\n}" },
            "url": "{{baseUrl}}/api/auth/login"
          }
        },
        {
          "name": "Iniciar sesión (cliente) → guarda {{clientToken}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "pm.test('200', ()=>pm.response.to.have.status(200));",
            "const j=pm.response.json(); pm.environment.set('clientToken', j.token);"
          ]}}],
          "request": {
            "method": "POST",
            "header": [{ "key": "Content-Type", "value": "application/json" }],
            "body": { "mode": "raw", "raw": "{\n  \"email\":\"{{clientEmail}}\",\n  \"password\":\"{{clientPass}}\"\n}" },
            "url": "{{baseUrl}}/api/auth/login"
          }
        }
      ]
    },

    {
      "name": "Usuarios (CRUD solo admin)",
      "item": [
        {
          "name": "Obtener mi perfil (admin)",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/users/me"
          }
        },
        {
          "name": "Listar usuarios",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/users"
          }
        },
        {
          "name": "Crear usuaria Makoto (idempotente) → {{testUserId}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "const created = pm.response.code===201;",
            "if (created){ const j=pm.response.json(); pm.environment.set('testUserId', j._id || j.id); }",
            "else {",
            "  pm.sendRequest({",
            "    url:`${pm.environment.get('baseUrl')}/api/users`,",
            "    method:'GET', header:{ Authorization:`Bearer ${pm.environment.get('adminToken')}` }",
            "  }, (err, resp)=>{",
            "    if(!err && resp.code===200){",
            "      const arr=resp.json();",
            "      const u=arr.find(x=>x.email===pm.environment.get('testUserEmail'));",
            "      if(u){ pm.environment.set('testUserId', u._id || u.id); }",
            "    }",
            "  });",
            "}",
            "pm.test('201 o ya existente', ()=> pm.expect([201,200,409,400,500]).to.include(pm.response.code));"
          ]}}],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/users",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\":\"Makoto Niijima\",\n  \"email\":\"{{testUserEmail}}\",\n  \"password\":\"{{testUserPass}}\",\n  \"role\":\"client\",\n  \"address\":\"Calle 99 #10-15, Bogotá\"\n}"
            }
          }
        },
        {
          "name": "Obtener usuaria Makoto por ID",
          "request": {
            "method": "GET",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/users/{{testUserId}}"
          }
        },
        {
          "name": "Actualizar usuaria Makoto",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/users/{{testUserId}}",
            "body": { "mode": "raw", "raw": "{\n  \"address\":\"Calle 99 #10-15, Bogotá (actualizada)\"\n}" }
          }
        },
        {
          "name": "Borrar usuaria Makoto por ID",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/users/{{testUserId}}"
          }
        }
      ]
    },

    {
      "name": "Productos (CRUD)",
      "item": [
        { "name": "Obtener productos (público)", "request": { "method": "GET", "url": "{{baseUrl}}/api/products" } },
        { "name": "Obtener categorías de productos (público)", "request": { "method": "GET", "url": "{{baseUrl}}/api/products/categories" } },
        { "name": "Obtener producto por ID (Elden Ring)", "request": { "method": "GET", "url": "{{baseUrl}}/api/products/{{productId_er}}" } },

        {
          "name": "Crear producto: Artbook Persona 5 (admin → para Victor) → {{testAdminProdId}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "if(pm.response.code===201){ const j=pm.response.json(); pm.environment.set('testAdminProdId', j._id || j.id); }",
            "else {",
            "  const seller=pm.environment.get('sellerEmail');",
            "  pm.sendRequest(`${pm.environment.get('baseUrl')}/api/products?sellerEmail=${encodeURIComponent(seller)}`,(err,resp)=>{",
            "    if(!err && resp.code===200){",
            "      const arr=resp.json();",
            "      const p=arr.find(x=>x.name===pm.environment.get('testAdminProdName'));",
            "      if(p){ pm.environment.set('testAdminProdId', p._id || p.id); }",
            "    }",
            "  });",
            "}",
            "pm.test('201 o ya existente', ()=> pm.expect([201,200,409,400,500]).to.include(pm.response.code));"
          ]}}],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/products",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sellerEmail\":\"{{sellerEmail}}\",\n  \"name\":\"{{testAdminProdName}}\",\n  \"description\":\"Tapa dura, 240 páginas a color\",\n  \"price\": 120000,\n  \"stock\": 8,\n  \"category\":\"Comics\",\n  \"condition\":\"new\"\n}"
            }
          }
        },
        {
          "name": "Actualizar Artbook Persona 5 (admin)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/products/{{testAdminProdId}}",
            "body": { "mode": "raw", "raw": "{\n  \"stock\": 10,\n  \"price\": 119900\n}" }
          }
        },
        {
          "name": "Borrar Artbook Persona 5 por ID (admin)",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/products/{{testAdminProdId}}"
          }
        },

        {
          "name": "Crear producto: Sticker pack Zelda (vendedor propio) → {{testSellerProdId}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "if(pm.response.code===201){ const j=pm.response.json(); pm.environment.set('testSellerProdId', j._id || j.id); }",
            "else {",
            "  const seller=pm.environment.get('sellerEmail');",
            "  pm.sendRequest(`${pm.environment.get('baseUrl')}/api/products?sellerEmail=${encodeURIComponent(seller)}`,(err,resp)=>{",
            "    if(!err && resp.code===200){",
            "      const arr=resp.json();",
            "      const p=arr.find(x=>x.name===pm.environment.get('testSellerProdName'));",
            "      if(p){ pm.environment.set('testSellerProdId', p._id || p.id); }",
            "    }",
            "  });",
            "}",
            "pm.test('201 o ya existente', ()=> pm.expect([201,200,409,400,500]).to.include(pm.response.code));"
          ]}}],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{sellerToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/products",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sellerEmail\":\"{{sellerEmail}}\",\n  \"name\":\"{{testSellerProdName}}\",\n  \"description\":\"Vinilo, corte troquelado, 10 piezas\",\n  \"price\": 17000,\n  \"stock\": 20,\n  \"category\":\"Accesorios Gaming\",\n  \"condition\":\"fan_made\"\n}"
            }
          }
        },
        {
          "name": "Actualizar Sticker pack Zelda (vendedor dueño)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{sellerToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/products/{{testSellerProdId}}",
            "body": { "mode": "raw", "raw": "{\n  \"price\": 18000\n}" }
          }
        },
        {
          "name": "Borrar Sticker pack Zelda por ID (vendedor dueño)",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{sellerToken}}" }],
            "url": "{{baseUrl}}/api/products/{{testSellerProdId}}"
          }
        }
      ]
    },

    {
      "name": "Categorías (CRUD solo admin)",
      "item": [
        { "name": "Listar categorías (público)", "request": { "method": "GET", "url": "{{baseUrl}}/api/categories" } },
        { "name": "Obtener categoría por ID (Videojuegos)", "request": { "method": "GET", "url": "{{baseUrl}}/api/categories/{{categoryId_videojuegos}}" } },

        {
          "name": "Crear categoría: Artbooks (idempotente) → {{testCategoryId}}",
          "event": [{ "listen": "test", "script": { "exec": [
            "const status=pm.response.code;",
            "if(status===201){ const j=pm.response.json(); pm.environment.set('testCategoryId', j._id || j.id); }",
            "else if(status===409){",
            "  const name=pm.environment.get('testCategoryName');",
            "  pm.sendRequest(`${pm.environment.get('baseUrl')}/api/categories?name=${encodeURIComponent(name)}`,(err,resp)=>{",
            "    if(!err && resp.code===200){",
            "      const arr=resp.json(); if(Array.isArray(arr)&&arr.length){ pm.environment.set('testCategoryId', arr[0]._id || arr[0].id); }",
            "    }",
            "  });",
            "}",
            "pm.test('201 o 409', ()=> pm.expect([201,409]).to.include(status));"
          ]}}],
          "request": {
            "method": "POST",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/categories",
            "body": { "mode": "raw", "raw": "{\n  \"name\":\"{{testCategoryName}}\"\n}" }
          }
        },
        {
          "name": "Actualizar categoría: Artbooks (actualizada)",
          "request": {
            "method": "PUT",
            "header": [
              { "key": "Authorization", "value": "Bearer {{adminToken}}" },
              { "key": "Content-Type",  "value": "application/json" }
            ],
            "url": "{{baseUrl}}/api/categories/{{testCategoryId}}",
            "body": { "mode": "raw", "raw": "{\n  \"name\":\"{{testCategoryNameUpdated}}\"\n}" }
          }
        },
        {
          "name": "Borrar categoría de prueba por ID",
          "request": {
            "method": "DELETE",
            "header": [{ "key": "Authorization", "value": "Bearer {{adminToken}}" }],
            "url": "{{baseUrl}}/api/categories/{{testCategoryId}}"
          }
        }
      ]
    }
  ]
}
